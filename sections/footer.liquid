{% comment %}theme-check-disable UndefinedObject{% endcomment %}
{{ 'section-footer.css' | asset_url | stylesheet_tag }}
<link rel="stylesheet" href="{{ 'component-newsletter.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-list-menu.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-list-payment.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-list-social.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-rte.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'disclosure.css' | asset_url }}" media="print" onload="this.media='all'">

<noscript>{{ 'component-newsletter.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-list-menu.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-list-payment.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-list-social.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-rte.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'disclosure.css' | asset_url | stylesheet_tag }}</noscript>

{%- style -%}
  .footer {
    margin-top: {{ section.settings.margin_top | times: 0.75 | round: 0 }}px;
  }

  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .footer {
      margin-top: {{ section.settings.margin_top }}px;
    }

    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{%- liquid 
  assign has_social_icons = true
  if settings.social_facebook_link == blank and settings.social_instagram_link == blank and settings.social_youtube_link == blank and settings.social_tiktok_link == blank and settings.social_twitter_link == blank and settings.social_pinterest_link == blank and settings.social_snapchat_link == blank and settings.social_tumblr_link == blank and settings.social_vimeo_link == blank
    assign has_social_icons = false
  endif

  if settings.brand_image == blank and settings.brand_headline == blank and settings.brand_description == blank
    assign brand_empty = true
  endif

  if section.blocks.size == 1 and section.blocks[0].type == 'brand_information' and brand_empty and has_social_icons == false and section.settings.newsletter_enable == false and section.settings.enable_follow_on_shop == false
    assign only_empty_brand = true
  endif
-%}

<div class="wp-footer">
  <div class="footer-newsletter">
    {%- if section.settings.newsletter_heading != blank -%}
      <p class="p1"><span class="s1">{{ section.settings.newsletter_heading | escape }}</span></p>
    {%- endif -%}
    
    <div class="klaviyo-form-ShVtnd"></div>
  </div>
  <div class="newsletter-popup">
    <div class="close-btn">&times;</div>
    <div class="inner">
      <img src="{{ 'popup-image-819x1024.jpg' | asset_url }}" alt="">
      <div class="content">
        <h2 class="bold kaffeesatz">Subscribe To Our Newsletter</h2>
        <p><span class="s1">Subscribe to our newsletter for new product updates, and exclusive discounts</span></p>
        <div class="_form_10">
          <form method="POST" action="https://whitesboots.activehosted.com/proc.php" id="_form_10_" class="_form _form_10 _inline-form  " novalidate>
              <input type="hidden" name="u" value="10" />
              <input type="hidden" name="f" value="10" />
              <input type="hidden" name="s" />
              <input type="hidden" name="c" value="0" />
              <input type="hidden" name="m" value="0" />
              <input type="hidden" name="act" value="sub" />
              <input type="hidden" name="v" value="2" />
              <div class="_form-content">
              <div class="_form_element _x47356280 _full_width ">
                  <label for="email" class="_form-label">
                  Email*
                  </label>
                  <div class="_field-wrapper">
                  <input type="text" id="email" name="email" placeholder="Enter your email" required/>
                  </div>
              </div>
              <div class="_button-wrapper _full_width">
                  <button id="_form_10_submit" class="_submit" type="submit">
                      Subscribe
                  </button>
              </div>
              <div class="_clear-element">
              </div>
              </div>
              <div class="_form-thank-you" style="display:none;">
              </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  {% comment %} <div class="footer-newsletter">
    <p class="p1"><span class="s1">Subscribe to our newsletter for new product updates, and exclusive discounts</span></p>
    <div class="klaviyo-form-ShVtnd"></div>
  </div> {% endcomment %}
  <footer>
    <hr>
    <div class="inner">
        <div class="customer-service">
          {% if section.settings.customer_service_heading != blank %}
            <a href="/customer-support/"><h2 class="vinchenso-bold">{{ section.settings.customer_service_heading }}</h2></a>
          {% endif %}
          {% if section.settings.customer_service_content != blank %}
            {{ section.settings.customer_service_content }}
          {% endif %}

            {%- if section.settings.show_social and has_social_icons -%}
            <div class="social-icons">
              {%- if settings.social_facebook_link != blank -%}
              <a href="{{ settings.social_facebook_link }}" target="_new"> {% render 'icon-facebook' %}</a>
              {% endif %}
              {%- if settings.social_twitter_link != blank -%}
              <a href="{{ settings.social_twitter_link }}" target="_new">{% render 'icon-twitter' %}</a>
              {% endif %}
              {%- if settings.social_instagram_link != blank -%}
              <a href="{{ settings.social_instagram_link }}" target="_new">{% render 'icon-instagram' %}</a>
              {% endif %}
              {%- if settings.social_youtube_link != blank -%}
              <a href="{{ settings.social_youtube_link }}" target="_new">{% render 'icon-youtube' %}</a>
              {% endif %}
            </div>
          {% endif %}
        </div>
        <div id="footer-links">
          {%- for block in section.blocks -%}
            {%- case block.type -%}
              {%- when '@app' -%}
                {% render block %}
              {%- when 'link_list' -%}
                {%- if block.settings.menu != blank -%}
                <div class="groups">
                  <div class="title kaffeesatz"><div class="nav-arrow">▸</div>{{ block.settings.heading }}</div>
                  <div class="links">
                    {% for link in block.settings.menu.links %}
                      <a href="{{ link.url }}">{{ link.title }}</a>
                    {% endfor %}
                  </div>
                </div>
                {% endif %}
            {%- endcase -%}
          {% endfor %}
        </div>
        <div class="footer-logo">
          <img src="{{ 'header-logo.svg' | asset_url }}" alt="logo">
          <a href="https://www.google.com/maps/place/{{ section.settings.address | strip_html }}" target="_blank">{{ section.settings.address }}</a>
        </div>
        {%- if section.settings.show_policy -%}
        <div class="footer-bottom">
          {% for link in section.settings.policy-links.links %}
          <a href="{{ link.url }}">{{ link.title }}</a>
          <span class="slash">|</span>
          {% endfor %}
          <br>
          <span>&copy; {{ 'now' | date: "%Y" }} White's Boots, Inc. All Rights Reserved.</span>
        </div>
      {% endif %}
    </div>
  </footer>
</div>

<script type="text/javascript">
const footer_links = document.querySelector('#footer-links');
const titles = footer_links.querySelectorAll('.title');
titles.forEach(title => {
  title.addEventListener('click',e => {
    e.currentTarget.classList.toggle('active');
    e.currentTarget.nextElementSibling.classList.toggle('show');
  })
})
</script>

<script type="text/javascript">
  window.cfields = [];
  window._show_thank_you = function(id, message, trackcmp_url, email) {
  var form = document.getElementById('_form_' + id + '_'), thank_you = form.querySelector('._form-thank-you');
  form.querySelector('._form-content').style.display = 'none';
  thank_you.innerHTML = message;
  thank_you.style.display = 'block';
  const vgoAlias = typeof visitorGlobalObjectAlias === 'undefined' ? 'vgo' : visitorGlobalObjectAlias;
  var visitorObject = window[vgoAlias];
  if (email && typeof visitorObject !== 'undefined') {
      visitorObject('setEmail', email);
      visitorObject('update');
  } else if (typeof(trackcmp_url) != 'undefined' && trackcmp_url) {
      // Site tracking URL to use after inline form submission.
      _load_script(trackcmp_url);
  }
  if (typeof window._form_callback !== 'undefined') window._form_callback(id);
  };
  window._show_error = function(id, message, html) {
  var form = document.getElementById('_form_' + id + '_'), err = document.createElement('div'), button = form.querySelector('button'), old_error = form.querySelector('._form_error');
  if (old_error) old_error.parentNode.removeChild(old_error);
  err.innerHTML = message;
  err.className = '_error-inner _form_error _no_arrow';
  var wrapper = document.createElement('div');
  wrapper.className = '_form-inner';
  wrapper.appendChild(err);
  button.parentNode.insertBefore(wrapper, button);
  document.querySelector('[id^="_form"][id$="_submit"]').disabled = false;
  if (html) {
      var div = document.createElement('div');
      div.className = '_error-html';
      div.innerHTML = html;
      err.appendChild(div);
  }
  };
  window._load_script = function(url, callback) {
  var head = document.querySelector('head'), script = document.createElement('script'), r = false;
  script.type = 'text/javascript';
  script.charset = 'utf-8';
  script.src = url;
  if (callback) {
      script.onload = script.onreadystatechange = function() {
      if (!r && (!this.readyState || this.readyState == 'complete')) {
          r = true;
          callback();
      }
      };
  }
  head.appendChild(script);
  };
  (function() {
  if (window.location.search.search("excludeform") !== -1) return false;
  var getCookie = function(name) {
      var match = document.cookie.match(new RegExp('(^|; )' + name + '=([^;]+)'));
      return match ? match[2] : null;
  }
  var setCookie = function(name, value) {
      var now = new Date();
      var time = now.getTime();
      var expireTime = time + 1000 * 60 * 60 * 24 * 365;
      now.setTime(expireTime);
      document.cookie = name + '=' + value + '; expires=' + now + ';path=/';
  }
      var addEvent = function(element, event, func) {
      if (element.addEventListener) {
      element.addEventListener(event, func);
      } else {
      var oldFunc = element['on' + event];
      element['on' + event] = function() {
          oldFunc.apply(this, arguments);
          func.apply(this, arguments);
      };
      }
  }
  var _removed = false;
  var form_to_submit = document.getElementById('_form_10_');
  var allInputs = form_to_submit.querySelectorAll('input, select, textarea'), tooltips = [], submitted = false;
  var getUrlParam = function(name) {
      var regexStr = '[\?&]' + name + '=([^&#]*)';
      var results = new RegExp(regexStr, 'i').exec(window.location.href);
      return results != undefined ? decodeURIComponent(results[1]) : false;
  };
  for (var i = 0; i < allInputs.length; i++) {
      var regexStr = "field\\[(\\d+)\\]";
      var results = new RegExp(regexStr).exec(allInputs[i].name);
      if (results != undefined) {
      allInputs[i].dataset.name = window.cfields[results[1]];
      } else {
      allInputs[i].dataset.name = allInputs[i].name;
      }
      var fieldVal = getUrlParam(allInputs[i].dataset.name);
      if (fieldVal) {
      if (allInputs[i].dataset.autofill === "false") {
          continue;
      }
      if (allInputs[i].type == "radio" || allInputs[i].type == "checkbox") {
          if (allInputs[i].value == fieldVal) {
          allInputs[i].checked = true;
          }
      } else {
          allInputs[i].value = fieldVal;
      }
      }
  }
  var remove_tooltips = function() {
      for (var i = 0; i < tooltips.length; i++) {
      tooltips[i].tip.parentNode.removeChild(tooltips[i].tip);
      }
      tooltips = [];
  };
  var remove_tooltip = function(elem) {
      for (var i = 0; i < tooltips.length; i++) {
      if (tooltips[i].elem === elem) {
          tooltips[i].tip.parentNode.removeChild(tooltips[i].tip);
          tooltips.splice(i, 1);
          return;
      }
      }
  };
  var create_tooltip = function(elem, text) {
      var tooltip = document.createElement('div'), arrow = document.createElement('div'), inner = document.createElement('div'), new_tooltip = {};
      if (elem.type != 'radio' && elem.type != 'checkbox') {
      tooltip.className = '_error';
      arrow.className = '_error-arrow';
      inner.className = '_error-inner';
      inner.innerHTML = text;
      tooltip.appendChild(arrow);
      tooltip.appendChild(inner);
      elem.parentNode.appendChild(tooltip);
      } else {
      tooltip.className = '_error-inner _no_arrow';
      tooltip.innerHTML = text;
      elem.parentNode.insertBefore(tooltip, elem);
      new_tooltip.no_arrow = true;
      }
      new_tooltip.tip = tooltip;
      new_tooltip.elem = elem;
      tooltips.push(new_tooltip);
      return new_tooltip;
  };
  var resize_tooltip = function(tooltip) {
      var rect = tooltip.elem.getBoundingClientRect();
      var doc = document.documentElement, scrollPosition = rect.top - ((window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0));
      if (scrollPosition < 40) {
      tooltip.tip.className = tooltip.tip.className.replace(/ ?(_above|_below) ?/g, '') + ' _below';
      } else {
      tooltip.tip.className = tooltip.tip.className.replace(/ ?(_above|_below) ?/g, '') + ' _above';
      }
  };
  var resize_tooltips = function() {
      if (_removed) return;
      for (var i = 0; i < tooltips.length; i++) {
      if (!tooltips[i].no_arrow) resize_tooltip(tooltips[i]);
      }
  };
  var validate_field = function(elem, remove) {
      var tooltip = null, value = elem.value, no_error = true;
      remove ? remove_tooltip(elem) : false;
      if (elem.type != 'checkbox') elem.className = elem.className.replace(/ ?_has_error ?/g, '');
      if (elem.getAttribute('required') !== null) {
      if (elem.type == 'radio' || (elem.type == 'checkbox' && /any/.test(elem.className))) {
          var elems = form_to_submit.elements[elem.name];
          if (!(elems instanceof NodeList || elems instanceof HTMLCollection) || elems.length <= 1) {
          no_error = elem.checked;
          }
          else {
          no_error = false;
          for (var i = 0; i < elems.length; i++) {
              if (elems[i].checked) no_error = true;
          }
          }
          if (!no_error) {
          tooltip = create_tooltip(elem, "Please select an option.");
          }
      } else if (elem.type =='checkbox') {
          var elems = form_to_submit.elements[elem.name], found = false, err = [];
          no_error = true;
          for (var i = 0; i < elems.length; i++) {
          if (elems[i].getAttribute('required') === null) continue;
          if (!found && elems[i] !== elem) return true;
          found = true;
          elems[i].className = elems[i].className.replace(/ ?_has_error ?/g, '');
          if (!elems[i].checked) {
              no_error = false;
              elems[i].className = elems[i].className + ' _has_error';
              err.push("Checking %s is required".replace("%s", elems[i].value));
          }
          }
          if (!no_error) {
          tooltip = create_tooltip(elem, err.join('<br/>'));
          }
      } else if (elem.tagName == 'SELECT') {
          var selected = true;
          if (elem.multiple) {
          selected = false;
          for (var i = 0; i < elem.options.length; i++) {
              if (elem.options[i].selected) {
              selected = true;
              break;
              }
          }
          } else {
          for (var i = 0; i < elem.options.length; i++) {
              if (elem.options[i].selected && !elem.options[i].value) {
              selected = false;
              }
          }
          }
          if (!selected) {
          elem.className = elem.className + ' _has_error';
          no_error = false;
          tooltip = create_tooltip(elem, "Please select an option.");
          }
      } else if (value === undefined || value === null || value === '') {
          elem.className = elem.className + ' _has_error';
          no_error = false;
          tooltip = create_tooltip(elem, "This field is required.");
      }
      }
      if (no_error && elem.name == 'email') {
      if (!value.match(/^[\+_a-z0-9-'&=]+(\.[\+_a-z0-9-']+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,})$/i)) {
          elem.className = elem.className + ' _has_error';
          no_error = false;
          tooltip = create_tooltip(elem, "Enter a valid email address.");
      }
      }
      if (no_error && /date_field/.test(elem.className)) {
      if (!value.match(/^\d\d\d\d-\d\d-\d\d$/)) {
          elem.className = elem.className + ' _has_error';
          no_error = false;
          tooltip = create_tooltip(elem, "Enter a valid date.");
      }
      }
      tooltip ? resize_tooltip(tooltip) : false;
      return no_error;
  };
  var needs_validate = function(el) {
          if(el.getAttribute('required') !== null){
              return true
          }
          if(el.name === 'email' && el.value !== ""){
              return true
          }
          return false
  };
  var validate_form = function(e) {
      var err = form_to_submit.querySelector('._form_error'), no_error = true;
      if (!submitted) {
      submitted = true;
      document.cookie = 'newsletter_submitted=true';
      for (var i = 0, len = allInputs.length; i < len; i++) {
          var input = allInputs[i];
          if (needs_validate(input)) {
          if (input.type == 'text') {
              addEvent(input, 'blur', function() {
              this.value = this.value.trim();
              validate_field(this, true);
              });
              addEvent(input, 'input', function() {
              validate_field(this, true);
              });
          } else if (input.type == 'radio' || input.type == 'checkbox') {
              (function(el) {
              var radios = form_to_submit.elements[el.name];
              for (var i = 0; i < radios.length; i++) {
                  addEvent(radios[i], 'click', function() {
                  validate_field(el, true);
                  });
              }
              })(input);
          } else if (input.tagName == 'SELECT') {
              addEvent(input, 'change', function() {
              validate_field(this, true);
              });
          } else if (input.type == 'textarea'){
              addEvent(input, 'input', function() {
              validate_field(this, true);
              });
          }
          }
      }
      }
      remove_tooltips();
      for (var i = 0, len = allInputs.length; i < len; i++) {
      var elem = allInputs[i];
      if (needs_validate(elem)) {
          if (elem.tagName.toLowerCase() !== "select") {
          elem.value = elem.value.trim();
          }
          validate_field(elem) ? true : no_error = false;
      }
      }
      if (!no_error && e) {
      e.preventDefault();
      }
      resize_tooltips();
      return no_error;
  };
  addEvent(window, 'resize', resize_tooltips);
  addEvent(window, 'scroll', resize_tooltips);
  window._old_serialize = null;
  if (typeof serialize !== 'undefined') window._old_serialize = window.serialize;
  _load_script("//d3rxaij56vjege.cloudfront.net/form-serialize/0.3/serialize.min.js", function() {
      window._form_serialize = window.serialize;
      if (window._old_serialize) window.serialize = window._old_serialize;
  });
  var form_submit = function(e) {
      e.preventDefault();
      if (validate_form()) {
      // use this trick to get the submit button & disable it using plain javascript
      document.querySelector('#_form_10_submit').disabled = true;
              var serialized = _form_serialize(document.getElementById('_form_10_')).replace(/%0A/g, '\\n');
      var err = form_to_submit.querySelector('._form_error');
      err ? err.parentNode.removeChild(err) : false;
      _load_script('https://whitesboots.activehosted.com/proc.php?' + serialized + '&jsonp=true');
      }
      return false;
  };
  addEvent(form_to_submit, 'submit', form_submit);
  })();
</script>

<script type="text/javascript">
  window.cfields = [];
  window._show_thank_you = function(id, message, trackcmp_url, email) {
  var form = document.getElementById('_form_' + id + '_'), thank_you = form.querySelector('._form-thank-you');
  form.querySelector('._form-content').style.display = 'none';
  thank_you.innerHTML = message;
  thank_you.style.display = 'block';
  const vgoAlias = typeof visitorGlobalObjectAlias === 'undefined' ? 'vgo' : visitorGlobalObjectAlias;
  var visitorObject = window[vgoAlias];
  if (email && typeof visitorObject !== 'undefined') {
      visitorObject('setEmail', email);
      visitorObject('update');
  } else if (typeof(trackcmp_url) != 'undefined' && trackcmp_url) {
      // Site tracking URL to use after inline form submission.
      _load_script(trackcmp_url);
  }
  if (typeof window._form_callback !== 'undefined') window._form_callback(id);
  };
  window._show_error = function(id, message, html) {
  var form = document.getElementById('_form_' + id + '_'), err = document.createElement('div'), button = form.querySelector('button'), old_error = form.querySelector('._form_error');
  if (old_error) old_error.parentNode.removeChild(old_error);
  err.innerHTML = message;
  err.className = '_error-inner _form_error _no_arrow';
  var wrapper = document.createElement('div');
  wrapper.className = '_form-inner';
  wrapper.appendChild(err);
  button.parentNode.insertBefore(wrapper, button);
  document.querySelector('[id^="_form"][id$="_submit"]').disabled = false;
  if (html) {
      var div = document.createElement('div');
      div.className = '_error-html';
      div.innerHTML = html;
      err.appendChild(div);
  }
  };
  window._load_script = function(url, callback) {
  var head = document.querySelector('head'), script = document.createElement('script'), r = false;
  script.type = 'text/javascript';
  script.charset = 'utf-8';
  script.src = url;
  if (callback) {
      script.onload = script.onreadystatechange = function() {
      if (!r && (!this.readyState || this.readyState == 'complete')) {
          r = true;
          callback();
      }
      };
  }
  head.appendChild(script);
  };
  (function() {
  if (window.location.search.search("excludeform") !== -1) return false;
  var getCookie = function(name) {
      var match = document.cookie.match(new RegExp('(^|; )' + name + '=([^;]+)'));
      return match ? match[2] : null;
  }
  var setCookie = function(name, value) {
      var now = new Date();
      var time = now.getTime();
      var expireTime = time + 1000 * 60 * 60 * 24 * 365;
      now.setTime(expireTime);
      document.cookie = name + '=' + value + '; expires=' + now + ';path=/';
  }
      var addEvent = function(element, event, func) {
      if (element.addEventListener) {
      element.addEventListener(event, func);
      } else {
      var oldFunc = element['on' + event];
      element['on' + event] = function() {
          oldFunc.apply(this, arguments);
          func.apply(this, arguments);
      };
      }
  }
  var _removed = false;
  var form_to_submit = document.getElementById('_form_10_');
  var allInputs = form_to_submit.querySelectorAll('input, select, textarea'), tooltips = [], submitted = false;
  var getUrlParam = function(name) {
      var regexStr = '[\?&]' + name + '=([^&#]*)';
      var results = new RegExp(regexStr, 'i').exec(window.location.href);
      return results != undefined ? decodeURIComponent(results[1]) : false;
  };
  for (var i = 0; i < allInputs.length; i++) {
      var regexStr = "field\\[(\\d+)\\]";
      var results = new RegExp(regexStr).exec(allInputs[i].name);
      if (results != undefined) {
      allInputs[i].dataset.name = window.cfields[results[1]];
      } else {
      allInputs[i].dataset.name = allInputs[i].name;
      }
      var fieldVal = getUrlParam(allInputs[i].dataset.name);
      if (fieldVal) {
      if (allInputs[i].dataset.autofill === "false") {
          continue;
      }
      if (allInputs[i].type == "radio" || allInputs[i].type == "checkbox") {
          if (allInputs[i].value == fieldVal) {
          allInputs[i].checked = true;
          }
      } else {
          allInputs[i].value = fieldVal;
      }
      }
  }
  var remove_tooltips = function() {
      for (var i = 0; i < tooltips.length; i++) {
      tooltips[i].tip.parentNode.removeChild(tooltips[i].tip);
      }
      tooltips = [];
  };
  var remove_tooltip = function(elem) {
      for (var i = 0; i < tooltips.length; i++) {
      if (tooltips[i].elem === elem) {
          tooltips[i].tip.parentNode.removeChild(tooltips[i].tip);
          tooltips.splice(i, 1);
          return;
      }
      }
  };
  var create_tooltip = function(elem, text) {
      var tooltip = document.createElement('div'), arrow = document.createElement('div'), inner = document.createElement('div'), new_tooltip = {};
      if (elem.type != 'radio' && elem.type != 'checkbox') {
      tooltip.className = '_error';
      arrow.className = '_error-arrow';
      inner.className = '_error-inner';
      inner.innerHTML = text;
      tooltip.appendChild(arrow);
      tooltip.appendChild(inner);
      elem.parentNode.appendChild(tooltip);
      } else {
      tooltip.className = '_error-inner _no_arrow';
      tooltip.innerHTML = text;
      elem.parentNode.insertBefore(tooltip, elem);
      new_tooltip.no_arrow = true;
      }
      new_tooltip.tip = tooltip;
      new_tooltip.elem = elem;
      tooltips.push(new_tooltip);
      return new_tooltip;
  };
  var resize_tooltip = function(tooltip) {
      var rect = tooltip.elem.getBoundingClientRect();
      var doc = document.documentElement, scrollPosition = rect.top - ((window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0));
      if (scrollPosition < 40) {
      tooltip.tip.className = tooltip.tip.className.replace(/ ?(_above|_below) ?/g, '') + ' _below';
      } else {
      tooltip.tip.className = tooltip.tip.className.replace(/ ?(_above|_below) ?/g, '') + ' _above';
      }
  };
  var resize_tooltips = function() {
      if (_removed) return;
      for (var i = 0; i < tooltips.length; i++) {
      if (!tooltips[i].no_arrow) resize_tooltip(tooltips[i]);
      }
  };
  var validate_field = function(elem, remove) {
      var tooltip = null, value = elem.value, no_error = true;
      remove ? remove_tooltip(elem) : false;
      if (elem.type != 'checkbox') elem.className = elem.className.replace(/ ?_has_error ?/g, '');
      if (elem.getAttribute('required') !== null) {
      if (elem.type == 'radio' || (elem.type == 'checkbox' && /any/.test(elem.className))) {
          var elems = form_to_submit.elements[elem.name];
          if (!(elems instanceof NodeList || elems instanceof HTMLCollection) || elems.length <= 1) {
          no_error = elem.checked;
          }
          else {
          no_error = false;
          for (var i = 0; i < elems.length; i++) {
              if (elems[i].checked) no_error = true;
          }
          }
          if (!no_error) {
          tooltip = create_tooltip(elem, "Please select an option.");
          }
      } else if (elem.type =='checkbox') {
          var elems = form_to_submit.elements[elem.name], found = false, err = [];
          no_error = true;
          for (var i = 0; i < elems.length; i++) {
          if (elems[i].getAttribute('required') === null) continue;
          if (!found && elems[i] !== elem) return true;
          found = true;
          elems[i].className = elems[i].className.replace(/ ?_has_error ?/g, '');
          if (!elems[i].checked) {
              no_error = false;
              elems[i].className = elems[i].className + ' _has_error';
              err.push("Checking %s is required".replace("%s", elems[i].value));
          }
          }
          if (!no_error) {
          tooltip = create_tooltip(elem, err.join('<br/>'));
          }
      } else if (elem.tagName == 'SELECT') {
          var selected = true;
          if (elem.multiple) {
          selected = false;
          for (var i = 0; i < elem.options.length; i++) {
              if (elem.options[i].selected) {
              selected = true;
              break;
              }
          }
          } else {
          for (var i = 0; i < elem.options.length; i++) {
              if (elem.options[i].selected && !elem.options[i].value) {
              selected = false;
              }
          }
          }
          if (!selected) {
          elem.className = elem.className + ' _has_error';
          no_error = false;
          tooltip = create_tooltip(elem, "Please select an option.");
          }
      } else if (value === undefined || value === null || value === '') {
          elem.className = elem.className + ' _has_error';
          no_error = false;
          tooltip = create_tooltip(elem, "This field is required.");
      }
      }
      if (no_error && elem.name == 'email') {
      if (!value.match(/^[\+_a-z0-9-'&=]+(\.[\+_a-z0-9-']+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,})$/i)) {
          elem.className = elem.className + ' _has_error';
          no_error = false;
          tooltip = create_tooltip(elem, "Enter a valid email address.");
      }
      }
      if (no_error && /date_field/.test(elem.className)) {
      if (!value.match(/^\d\d\d\d-\d\d-\d\d$/)) {
          elem.className = elem.className + ' _has_error';
          no_error = false;
          tooltip = create_tooltip(elem, "Enter a valid date.");
      }
      }
      tooltip ? resize_tooltip(tooltip) : false;
      return no_error;
  };
  var needs_validate = function(el) {
          if(el.getAttribute('required') !== null){
              return true
          }
          if(el.name === 'email' && el.value !== ""){
              return true
          }
          return false
  };
  var validate_form = function(e) {
      var err = form_to_submit.querySelector('._form_error'), no_error = true;
      if (!submitted) {
      submitted = true;
      document.cookie = 'newsletter_submitted=true';
      for (var i = 0, len = allInputs.length; i < len; i++) {
          var input = allInputs[i];
          if (needs_validate(input)) {
          if (input.type == 'text') {
              addEvent(input, 'blur', function() {
              this.value = this.value.trim();
              validate_field(this, true);
              });
              addEvent(input, 'input', function() {
              validate_field(this, true);
              });
          } else if (input.type == 'radio' || input.type == 'checkbox') {
              (function(el) {
              var radios = form_to_submit.elements[el.name];
              for (var i = 0; i < radios.length; i++) {
                  addEvent(radios[i], 'click', function() {
                  validate_field(el, true);
                  });
              }
              })(input);
          } else if (input.tagName == 'SELECT') {
              addEvent(input, 'change', function() {
              validate_field(this, true);
              });
          } else if (input.type == 'textarea'){
              addEvent(input, 'input', function() {
              validate_field(this, true);
              });
          }
          }
      }
      }
      remove_tooltips();
      for (var i = 0, len = allInputs.length; i < len; i++) {
      var elem = allInputs[i];
      if (needs_validate(elem)) {
          if (elem.tagName.toLowerCase() !== "select") {
          elem.value = elem.value.trim();
          }
          validate_field(elem) ? true : no_error = false;
      }
      }
      if (!no_error && e) {
      e.preventDefault();
      }
      resize_tooltips();
      return no_error;
  };
  addEvent(window, 'resize', resize_tooltips);
  addEvent(window, 'scroll', resize_tooltips);
  window._old_serialize = null;
  if (typeof serialize !== 'undefined') window._old_serialize = window.serialize;
  _load_script("//d3rxaij56vjege.cloudfront.net/form-serialize/0.3/serialize.min.js", function() {
      window._form_serialize = window.serialize;
      if (window._old_serialize) window.serialize = window._old_serialize;
  });
  var form_submit = function(e) {
      e.preventDefault();
      if (validate_form()) {
      // use this trick to get the submit button & disable it using plain javascript
      document.querySelector('#_form_10_submit').disabled = true;
              var serialized = _form_serialize(document.getElementById('_form_10_')).replace(/%0A/g, '\\n');
      var err = form_to_submit.querySelector('._form_error');
      err ? err.parentNode.removeChild(err) : false;
      _load_script('https://whitesboots.activehosted.com/proc.php?' + serialized + '&jsonp=true');
      }
      return false;
  };
  addEvent(form_to_submit, 'submit', form_submit);
  })();
</script>

<script async type="text/javascript" src="https://static.klaviyo.com/onsite/js/klaviyo.js?company_id=WuCdZL"></script>

{% schema %}
{
  "name": "t:sections.footer.name",
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "link_list",
      "name": "t:sections.footer.blocks.link_list.name",
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "default": "Quick links",
          "label": "t:sections.footer.blocks.link_list.settings.heading.label"
        },
        {
          "type": "link_list",
          "id": "menu",
          "default": "footer",
          "label": "t:sections.footer.blocks.link_list.settings.menu.label",
          "info": "t:sections.footer.blocks.link_list.settings.menu.info"
        }
      ]
    },
    {
      "type": "brand_information",
      "name": "t:sections.footer.blocks.brand_information.name",
      "settings": [
        {
          "type": "paragraph",
          "content": "t:sections.footer.blocks.brand_information.settings.paragraph.content"
        },
        {
          "type": "header",
          "content": "t:sections.footer.blocks.brand_information.settings.header__1.content"
        },
        {
          "type": "checkbox",
          "id": "show_social",
          "default": true,
          "label": "t:sections.footer.blocks.brand_information.settings.show_social.label",
          "info": "t:sections.footer.blocks.brand_information.settings.show_social.info"
        }
      ]
    },
    {
      "type": "text",
      "name": "t:sections.footer.blocks.text.name",
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "default": "Heading",
          "label": "t:sections.footer.blocks.text.settings.heading.label"
        },
        {
          "type": "richtext",
          "id": "subtext",
          "default": "<p>Share contact information, store details, and brand content with your customers.</p>",
          "label": "t:sections.footer.blocks.text.settings.subtext.label"
        }
      ]
    },
    {
      "type": "image",
      "name": "Image",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "range",
          "id": "image_width",
          "min": 50,
          "max": 550,
          "step": 5,
          "unit": "px",
          "label": "Image width",
          "default": 100
        },
        {
          "type": "select",
          "id": "alignment",
          "label": "Image alignment on large screen",
          "options": [
            {
              "value": "",
              "label": "Left"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "right",
              "label": "Right"
            }
          ],
          "default": "center"
        }
      ]
    }
  ],
  "settings": [
    {
      "type": "richtext",
      "id": "address",
      "label": "Address Info"
    },
    {
      "type": "header",
      "content": "t:sections.footer.settings.header__1.content",
      "info": "t:sections.footer.settings.header__1.info"
    },
    {
      "type": "checkbox",
      "id": "newsletter_enable",
      "default": true,
      "label": "t:sections.footer.settings.newsletter_enable.label"
    },
    {
      "type": "text",
      "id": "newsletter_heading",
      "default": "Subscribe to our emails",
      "label": "t:sections.footer.settings.newsletter_heading.label"
    },
    {
      "type": "header",
      "content": "t:sections.footer.settings.header__2.content",
      "info": "t:sections.footer.settings.header__2.info"
    },
    {
      "type": "checkbox",
      "id": "show_social",
      "default": true,
      "label": "t:sections.footer.settings.show_social.label"
    },
    
    {
      "type": "header",
      "content": "t:sections.footer.settings.header__8.content",
      "info": "t:sections.footer.settings.header__8.info"
    },
    {
      "type": "checkbox",
      "id": "show_policy",
      "default": false,
      "label": "t:sections.footer.settings.show_policy.label"
    },
    {
      "type": "link_list",
      "id": "policy-links",
      "default": "footer",
      "label": "Policy Links",
      "info": "Policy Links"
    },
    {
      "type": "header",
      "content": "Customer Service"
    },
    {
      "type": "text",
      "id": "customer_service_heading",
      "label": "Title"
    },
    {
      "type": "richtext",
      "id": "customer_service_content",
      "label": "Content"
    },
    {
      "type": "header",
      "content": "t:sections.all.spacing"
    },
    {
      "type": "range",
      "id": "margin_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.footer.settings.margin_top.label",
      "default": 0
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "default": {
    "blocks": [
      {
        "type": "link_list"
      },
      {
        "type": "text"
      }
    ]
  }
}
{% endschema %}
